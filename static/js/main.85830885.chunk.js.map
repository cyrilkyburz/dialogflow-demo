{"version":3,"sources":["components/MessagesView.tsx","components/ChatInput.tsx","services/dialogflow-service.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MessagesView","messages","ref","useRef","useEffect","current","scrollTop","scrollHeight","className","map","message","key","sent","text","ChatInput","submit","useState","setText","error","setError","handleSubmit","a","focus","value","onChange","target","placeholder","onClick","disabled","length","icon","faPaperPlane","faTimes","DialogflowService","sessionId","this","uuidv4","fetch","method","headers","body","JSON","stringify","queryInput","languageCode","then","response","json","result","console","log","fulfillmentText","App","dialogflow","setMessages","setResponse","addMessage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4QAGe,SAASA,EAAT,GAA6D,IAArCC,EAAoC,EAApCA,SAC/BC,EAAMC,iBAAuB,MAOnC,OANAC,qBAAU,WACJF,GAAOA,EAAIG,UACbH,EAAIG,QAAQC,UAAYJ,EAAIG,QAAQE,gBAErC,CAACN,IAGF,yBAAKC,IAAKA,EAAKM,UAAU,YACtBP,EAASQ,KAAI,SAACC,EAASC,GAAV,OACZ,yBAAKA,IAAKA,EAAKH,UAAS,UAAKE,EAAQE,KAAO,OAAS,WAA7B,aACrBF,EAAQG,U,kBCXJ,SAASC,EAAT,GAAgF,IAA3DC,EAA0D,EAA1DA,OAC5Bb,EAAMC,iBAA4B,MADoD,EAEpEa,mBAAS,IAF2D,mBAErFH,EAFqF,KAE/EI,EAF+E,OAGlED,mBAAS,IAHyD,mBAGrFE,EAHqF,KAG9EC,EAH8E,KAKtFC,EAAY,uCAAG,sBAAAC,EAAA,6DACnBJ,EAAQ,IACRf,EAAIG,QAASiB,QAFM,SAIEP,EAAOF,GAJT,eAMjBM,EAAS,UANQ,2CAAH,qDAUlB,OACE,yBAAKX,UAAU,SACb,8BAAUN,IAAKA,EAAKqB,MAAOV,EAAMW,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBR,EAAQQ,EAAOF,QAAQG,YAAY,mBAC9F,4BAAQC,QAASP,EAAcQ,SAAUf,EAAKgB,OAAS,GACrD,kBAAC,IAAD,CAAiBC,KAAMC,OAExBb,EAAMW,OAAS,GACd,yBAAKrB,UAAU,QAAQmB,QAAS,kBAAMR,EAAS,MAC5CD,EACD,kBAAC,IAAD,CAAiBY,KAAME,Q,qCC1BZC,E,WAGnB,aAAe,yBAFPC,eAEM,EACZC,KAAKD,UAAYE,M,4FAGNvB,G,uFACUwB,MACnB,yEACA,CACEC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBR,UAAWC,KAAKD,UAChBS,WAAY,CACV9B,KAAM,CACJA,OACA+B,aAAc,cAKtBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,U,cAftBC,E,OAiBNC,QAAQC,IAAIF,G,kBAELA,EAAOG,iB,8GCgBHC,EAvCO,WAAO,IAAD,EACLpC,mBAAS,IAAIiB,GAA3BoB,EADmB,sBAEMrC,mBAAmB,CAAC,CAAEH,KAAM,mCAAoCD,MAAM,KAF5E,mBAEnBX,EAFmB,KAETqD,EAFS,OAGMtC,mBAAS,IAHf,mBAGnB8B,EAHmB,KAGTS,EAHS,KAKpBC,EAAa,SAAC9C,GAClB4C,EAAY,GAAD,mBAAKrD,GAAL,CAAeS,MAG5BN,qBAAU,WACJ0C,EAASjB,SACX2B,EAAW,CAAE3C,KAAMiC,EAAUlC,MAAM,IACnC2C,EAAY,OAEb,CAACT,IAEJ,IAAM1B,EAAY,uCAAG,WAAOP,GAAP,eAAAQ,EAAA,6DACnBmC,EAAW,CAAE3C,OAAMD,MAAM,IADN,SAEIyC,EAAWtC,OAAOF,GAFtB,YAEbiC,EAFa,+BAKjBS,EAAYT,GALK,mBAMV,GANU,iCAQV,GARU,4CAAH,sDAYlB,OACE,yBAAKtC,UAAU,QACb,gCACE,yCAEF,kBAACR,EAAD,CAAcC,SAAUA,IACxB,kBAACa,EAAD,CAAWC,OAAQK,MC5BLqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.85830885.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Messages } from '../interfaces';\n\nexport default function MessagesView({ messages }: { messages: Messages }) {\n  const ref = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (ref && ref.current) {\n      ref.current.scrollTop = ref.current.scrollHeight;\n    }\n  }, [messages]);\n\n  return (\n    <div ref={ref} className=\"messages\">\n      {messages.map((message, key) => (\n        <div key={key} className={`${message.sent ? 'sent' : 'received'} message`}>\n          {message.text}\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React, { useRef, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane, faTimes } from '@fortawesome/free-solid-svg-icons';\n\nexport default function ChatInput({ submit }: { submit: (text: string) => Promise<boolean> }) {\n  const ref = useRef<HTMLTextAreaElement>(null);\n  const [text, setText] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = async () => {\n    setText('');\n    ref.current!.focus();\n\n    const result = await submit(text);\n    if (!result) {\n      setError('Failed');\n    }\n  };\n\n  return (\n    <div className=\"input\">\n      <textarea ref={ref} value={text} onChange={({ target }) => setText(target.value)} placeholder=\"Type a message\" />\n      <button onClick={handleSubmit} disabled={text.length < 1}>\n        <FontAwesomeIcon icon={faPaperPlane} />\n      </button>\n      {error.length > 0 && (\n        <div className=\"error\" onClick={() => setError('')}>\n          {error}\n          <FontAwesomeIcon icon={faTimes} />\n        </div>\n      )}\n    </div>\n  );\n}\n","import uuidv4 from 'uuid/v4';\n\nexport default class DialogflowService {\n  private sessionId: string;\n\n  constructor() {\n    this.sessionId = uuidv4();\n  }\n\n  async submit(text: string) {\n    const result = await fetch(\n      'https://europe-west1-renuochatbot.cloudfunctions.net/dialogflowGateway',\n      {\n        method: 'post',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          sessionId: this.sessionId,\n          queryInput: {\n            text: {\n              text,\n              languageCode: 'en-US'\n            }\n          }\n        })\n      }\n    ).then(response => response.json());\n\n    console.log(result);\n\n    return result.fulfillmentText;\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { Message, Messages } from './interfaces';\nimport MessagesView from './components/MessagesView';\nimport ChatInput from './components/ChatInput';\nimport DialogflowService from './services/dialogflow-service';\n\nconst App: React.FC = () => {\n  const [dialogflow] = useState(new DialogflowService());\n  const [messages, setMessages] = useState<Messages>([{ text: 'Hi, I am Dialga. How can i help?', sent: false }]);\n  const [response, setResponse] = useState('');\n\n  const addMessage = (message: Message) => {\n    setMessages([...messages, message]);\n  };\n\n  useEffect(() => {\n    if (response.length) {\n      addMessage({ text: response, sent: false });\n      setResponse('');\n    }\n  }, [response]);\n\n  const handleSubmit = async (text: string) => {\n    addMessage({ text, sent: true });\n    const response = await dialogflow.submit(text);\n\n    if (response) {\n      setResponse(response);\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return (\n    <div className=\"Chat\">\n      <header>\n        <h1>RenuoBot</h1>\n      </header>\n      <MessagesView messages={messages} />\n      <ChatInput submit={handleSubmit} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles//index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}